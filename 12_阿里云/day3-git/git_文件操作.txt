
小结：
	初始化一个Git仓库，使用git init命令。
	x添加文件到Git仓库，分两步：
		使用命令git add <file>，注意，可反复多次使用，添加多个文件；
		使用命令git commit -m <message>，完成。

初始化库
	git init
将readme.txt文件加入库
	git add readme.txt	
提交事务并写入提示信息
	git commit -m "add a messege"		

要随时掌握工作区的状态，使用git status命令。
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

查看工作区的状态
	git status 
 查看变化   
	git diff   



HEAD指向的版本就是当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^  git reset --hard HEAD^
Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

命令显示从最近到最远的提交日志
	git log  
一行显示一个历史的commit
git reflog    可是查看历史的commit_id
	git lot --pretty-oneline   



learngit 工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。

工作区：learngit
git库：
		暂存区：index(stage)：git add  后的  git commit 之前的文件存放在这
		分支：master ：git commit 之后的文件存放在这

可以查看工作区和版本库里面最新版本的区别
	git diff HEAD -- file   
	git diff HEAD -- readme.txt
撤销修改，撤销删除 
	git checkout -- file 
					1.其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
					2.但是从来没有被添加到版本库就被删除的文件，是无法恢复的！
	git checkout -- readme.txt
可以把暂存区的修改撤销掉（unstage），重新放回工作区：
	git reset HEAD <file> 
	git reset HEAD readme.txt

小结：
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

删除文件
	rm  file
	git rm file

	rm readme.txt
	git readme.txt

撤销删除
	git checkout -- readme.txt
